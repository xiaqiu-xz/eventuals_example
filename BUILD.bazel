# 加载 rules_cc 提供的 cc_library / cc_binary 定义
load("@rules_cc//cc:defs.bzl", "cc_library")

# 定义一个 C++ 可执行文件 target
cc_binary(
    name = "main",             # 可执行文件的名字
    srcs = ["main.cpp"],       # 源文件列表
    deps = [
        # 依赖的外部库，这里依赖 eventuals 库
        "@com_github_3rdparty_eventuals//eventuals",
    ],
    # 注意：至少在 macOS 上不能静态链接，因为某些系统库需要动态加载
    linkstatic = False,
)


# 定义一个 C++ 可执行文件 target
cc_binary(
    name = "test2",             # 可执行文件的名字
    srcs = ["test2.cpp"],       # 源文件列表
    deps = [
        # 依赖的外部库，这里依赖 eventuals 库
        "@com_github_3rdparty_eventuals//eventuals",
    ],
    # 注意：至少在 macOS 上不能静态链接，因为某些系统库需要动态加载
    linkstatic = False,
)


# 定义一个 C++ 可执行文件 target
cc_binary(
    name = "test3",             # 可执行文件的名字
    srcs = ["test3.cpp"],       # 源文件列表
    deps = [
        # 依赖的外部库，这里依赖 eventuals 库
        "@com_github_3rdparty_eventuals//eventuals",
    ],
    # 注意：至少在 macOS 上不能静态链接，因为某些系统库需要动态加载
    linkstatic = False,
)


# 定义一个 C++ 可执行文件 target
cc_binary(
    name = "test4",             # 可执行文件的名字
    srcs = ["test4.cpp"],       # 源文件列表
    deps = [
        # 依赖的外部库，这里依赖 eventuals 库
        "@com_github_3rdparty_eventuals//eventuals",
    ],
    # 注意：至少在 macOS 上不能静态链接，因为某些系统库需要动态加载
    linkstatic = False,
)

# 定义一个 C++ 可执行文件 target
cc_binary(
    name = "test5",             # 可执行文件的名字
    srcs = ["test5.cpp"],       # 源文件列表
    deps = [
        # 依赖的外部库，这里依赖 eventuals 库
        "@com_github_3rdparty_eventuals//eventuals",
    ],
    # 注意：至少在 macOS 上不能静态链接，因为某些系统库需要动态加载
    linkstatic = False,
)


# 定义一个 C++ 可执行文件 target
cc_binary(
    name = "test6",             # 可执行文件的名字
    srcs = ["test6.cpp"],       # 源文件列表
    deps = [
        # 依赖的外部库，这里依赖 eventuals 库
        "@com_github_3rdparty_eventuals//eventuals",
    ],
    # 注意：至少在 macOS 上不能静态链接，因为某些系统库需要动态加载
    linkstatic = False,
)



# 定义一个 C++ 可执行文件 target
cc_binary(
    name = "test7",             # 可执行文件的名字
    srcs = ["test7.cpp"],       # 源文件列表
    deps = [
        # 依赖的外部库，这里依赖 eventuals 库
        "@com_github_3rdparty_eventuals//eventuals",
    ],
    # 注意：至少在 macOS 上不能静态链接，因为某些系统库需要动态加载
    linkstatic = False,
)


# 定义一个 C++ 可执行文件 target
cc_binary(
    name = "test8",             # 可执行文件的名字
    srcs = ["test8.cpp"],       # 源文件列表
    deps = [
        # 依赖的外部库，这里依赖 eventuals 库
        "@com_github_3rdparty_eventuals//eventuals",
    ],
    # 注意：至少在 macOS 上不能静态链接，因为某些系统库需要动态加载
    linkstatic = False,
)


# 定义一个 C++ 可执行文件 target
cc_binary(
    name = "test9",             # 可执行文件的名字
    srcs = ["test9.cpp"],       # 源文件列表
    deps = [
        # 依赖的外部库，这里依赖 eventuals 库
        "@com_github_3rdparty_eventuals//eventuals",
    ],
    # 注意：至少在 macOS 上不能静态链接，因为某些系统库需要动态加载
    linkstatic = False,
)

# 定义一个 C++ 可执行文件 target
cc_binary(
    name = "test10",             # 可执行文件的名字
    srcs = ["test10.cpp"],       # 源文件列表
    deps = [
        # 依赖的外部库，这里依赖 eventuals 库
        "@com_github_3rdparty_eventuals//eventuals",
    ],
    # 注意：至少在 macOS 上不能静态链接，因为某些系统库需要动态加载
    linkstatic = False,
)



# 定义一个 C++ 可执行文件 target
cc_binary(
    name = "test11",             # 可执行文件的名字
    srcs = ["test11.cpp"],       # 源文件列表
    deps = [
        # 依赖的外部库，这里依赖 eventuals 库
        "@com_github_3rdparty_eventuals//eventuals",
    ],
    # 注意：至少在 macOS 上不能静态链接，因为某些系统库需要动态加载
    linkstatic = False,
)


# bazel build -c dbg :test2
# bazel build -c dbg :test11 && ./bazel-bin/test11